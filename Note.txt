Nx, Dev Tools for Monorepos - In-Depth Explainer with Victor Savkin
https://www.youtube.com/watch?v=h5FIGDn5YM0
https://github.com/Annie-Huang/myorg5

https://nx.dev/angular/tutorial/01-create-application
https://github.com/angular/angular/issues/33100


==============================================

C:\react>npx create-nx-workspace
npx: installed 199 in 18.931s
? Workspace name (e.g., org name)     myorg5
? What to create in the new workspace angular           [a workspace with a single Angular application]
? Application name                    shop
? Default stylesheet format           CSS

command the above script is running:
new myorg5 --preset="angular" --appName="shop" --style="css" --interactive=false --collection=@nrwl/workspace


C:\react\myorg5>ng build shop       <<< Standard ng build
C:\react\myorg5>nx build shop       <<< Standard nx build, which is wrapping ng, BUI this will run much faster the 2nd time optimized.

C:\react\myorg5>nx test shop        <<< The same as running 'ng run shop:test', but will it be faster?


C:\react\myorg5>nx e2e shop-e2e --headless
C:\react\myorg5>nx e2e shop-e2e --watch
It default got cypress installed when you setup angular workspace:
    "cypress": "^4.1.0",
    "@nrwl/cypress": "9.2.2"


C:\react\myorg5>nx serve shop

-----------
Why do we need this script for every postinstall????
"postinstall": "ngcc --properties es2015 browser module main --first-only --create-ivy-entry-points"
https://github.com/angular/angular/issues/33100
Almost ðŸ˜ƒ ivy-ngcc does not create app versions; it transforms Angular dependencies to be in Ivy format (i.e. as if they had been compiled by ngtsc (the Ivy compiler)).
Each Angular dependency you have in your node_modules/ can have up to 4 different formats
(different sets of files) - es2015, es5, commonjs, umd - that ngcc knows how to transform.
                            ---------------------------
So, when running ivy-ngcc (now renamed to ngcc btw) without any arguments, it will transform all formats of each dependency that exist
(some dependencies may not provide all formats).


"postinstall-new": "ngcc --properties es2015 browser module main --first-only --create-ivy-entry-points && ln -sf ./nx ./node_modules/.bin/ng"
is for linux is force (f) making the symbolic (s) links (ln)
--------------

C:\react\myorg5>nx g lib ui
? Which stylesheet format would you like to use? CSS

C:\react\myorg5>nx g component item-list --project=ui --dry-run

Notice
import { UiModule } from '@myorg5/ui';
It takes a @<OrgName>/<LibName>


C:\react\myorg5>nx list
>  NX  Installed plugins:
  @nrwl/angular (builders,schematics)
  @nrwl/cypress (builders,schematics)
  @nrwl/jest (builders,schematics)
  @nrwl/workspace (builders,schematics)
>  NX  Also available:
  @nrwl/bazel (schematics)
  @nrwl/express (builders,schematics)
  @nrwl/linter (builders)
  @nrwl/nest (builders,schematics)
>  NX  Community plugins:
  @nxtend/ionic-react - An Nx plugin for developing Ionic React applications and libraries
  @angular-architects/ddd - Nx plugin for structuring a monorepo with domains and layers
  @offeringsolutions/nx-karma-to-jest - Nx plugin for replacing karma with jest in an Nx workspace
  @flowaccount/nx-serverless - Nx plugin for node/angular-universal schematics and deployment builders in an Nx workspace
  @dev-thought/nx-deploy-it - Nx plugin to deploy applications on your favorite cloud provider
  @offeringsolutions/nx-protractor-to-cypress - Nx plugin to replace protractor with cypress in an nx workspace
  @gperdomor/nx-docker - Nx plugin to build docker images of your affected apps

C:\react\myorg5>nx list @nrwl/storybook
>  NX   NOTE  @nrwl/storybook is not currently installed
  Use "npm install --save-dev @nrwl/storybook" to add new capabilities

C:\react\myorg5>npm install --save-dev @nrwl/storybook


C:\react\myorg5>nx list @nrwl/storybook
>  NX  Capabilities in @nrwl/storybook:
  SCHEMATICS
  init : Add storybook configuration to the workspace
  configuration : Add storybook configuration to a ui library
  cypress-project : Add cypress e2e app to test a ui library that is set up for storybook
  BUILDERS
  storybook : Serve Storybook
  build : Build Storybook


C:\react\myorg5>nx g storybook-configuration ui
? Configure a cypress e2e app to run against the storybook instance? Yes
? Automatically generate *.stories.ts files for components declared in this library? Yes
? Automatically generate *.spec.ts files in the cypress e2e app generated by the cypress-configure schematic? Yes

C:\react\myorg5>nx run ui:storybook
http://localhost:4400/

C:\react\myorg5>nx e2e ui-e2e --watch
http://localhost:4401/


C:\react\myorg5>nx g lib feature-main --parent-module=apps/shop/src/app/app.module.ts --routing --lazy
? Which stylesheet format would you like to use? CSS
    <<< Go to another component that is stored in the lib through lazy routing url

C:\react\myorg5>nx g lib feature-about --parent-module=apps/shop/src/app/app.module.ts --routing --lazy
? Which stylesheet format would you like to use? CSS


C:\react\myorg5>nx g component main --project=feature-main
