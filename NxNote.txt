https://www.youtube.com/watch?v=lozIzU0ik2s   (Caching Nx Commands)

-------------------------------------------

C:\react>npx create-nx-workspace
npx: installed 199 in 18.931s
? Workspace name (e.g., org name)     myorg5
? What to create in the new workspace angular           [a workspace with a single Angular application]
? Application name                    shop
? Default stylesheet format           CSS

new myorg5 --preset="angular" --appName="shop" --style="css" --interactive=false --collection=@nrwl/workspace

C:\react\myorg5>ng build shop       <<< Standard ng build
C:\react\myorg5>nx build shop       <<< Standard nx build, which is wrapping ng, BUI this will run much faster the 2nd time optimized.
C:\react\myorg5>nx build shop --prod
C:\react\myorg5>nx serve shop

C:\react\myorg5>nx test shop        <<< The same as running 'ng run shop:test', but will it be faster?

C:\react\myorg5>nx e2e shop-e2e --headless
C:\react\myorg5>nx e2e shop-e2e --watch

C:\react\myorg5>nx g lib ui
C:\react\myorg5>nx g component item-list --project=ui --dry-run

C:\react\myorg5>nx list
C:\react\myorg5>nx list @nrwl/storybook
C:\react\myorg5>npm install --save-dev @nrwl/storybook
C:\react\myorg5>nx list @nrwl/storybook

C:\react\myorg5>nx g storybook-configuration ui
C:\react\myorg5>nx run ui:storybook
C:\react\myorg5>nx e2e ui-e2e --watch

C:\react\myorg5>nx g lib feature-main --parent-module=apps/shop/src/app/app.module.ts --routing --lazy
C:\react\myorg5>nx g lib feature-about --parent-module=apps/shop/src/app/app.module.ts --routing --lazy

C:\react\myorg5>nx g component main --project=feature-main
C:\react\myorg5>nx g component about --project=feature-about

C:\react\myorg5>nx serve shop
C:\react\myorg5>nx serve shop --port=5200
C:\react\myorg5>nx dep-graph

C:\react\myorg5>nx test feature-main
C:\react\myorg5>nx test shop --with-deps --parallel           <<<< !!! This is mostly useful, test app shops and all the libs that shops depends on

C:\react\myorg5>nx g app admin      <<< generate another app
C:\react\myorg5>nx dep-graph

C:\react\myorg5>nx test shop --with-deps --parallel
C:\react\myorg5>nx test admin --with-deps --parallel


nx run-many --target=serve --projects=one,two,three --parallel                             <<< default --maxParallel is 3.
nx run-many --target=serve --projects=one,two,three,four --parallel --maxParallel=100
C:\react\myorg5>nx run-many --target=test --all                                            <<< !!! This is mostly useful, to test all the apps and libs uni test


C:\react\myorg5>nx affected:libs
C:\react\myorg5>nx affected:apps
C:\react\myorg5>nx affected:dep-graph       <<< you can choose between Select Affected and Select All button
C:\react\myorg5>nx affected:test



--------------------------
https://www.youtube.com/watch?v=lozIzU0ik2s   (Caching Nx Commands)

In Nx 8.11, you can configure Nx to use a local cache for builder command outputs - similar to the caching that Google's Bazel does.
In specific scenarios, this makes your builder commands nearly instantaneous.

nx run my-app:build
nx run my-app:lint
nx run my-app:test

Need to add in nx.json:
  "tasksRunnerOptions": {
    "default": {
      "runner": "@nrwl/workspace/tasks-runners/tasks-runner-v2",
      "options": {
        "cacheableOperations": ["build", "lint", "test"]
      }
    }
  },

Cache is stored in node_modules/.cache/nx/ folder

You can delete the dist folder and run the command the 3rd time. And you will find it as fast as the 2nd time.

When you make any modification on the code set and run the command again. It will be slow for the 1st time as it needs to rebuild everything.
It sounds useful when you make modification on your app while your lib is unchanged so don't need to rebuild.

